from bs4 import BeautifulSoup
import os
import json
import logging

# Configuration du logging
logging.basicConfig(filename='errors.log', level=logging.ERROR)

tournaments_folder_path = "C:/Users/matte/OneDrive/Bureau/SAE601_2025/data_collection/cache/tournament"
json_folder_path = "C:/Users/matte/OneDrive/Bureau/SAE601_2025/data_collection/output"

for root, dirs, files in os.walk(tournaments_folder_path):
    for file_name in files:
        if file_name == "standingsplayers.html":
            html_file_path = os.path.join(root, file_name)

            try:
                with open(html_file_path, "r", encoding="utf-8") as file:
                    soup = BeautifulSoup(file, "html.parser")
            except UnicodeDecodeError:
                try:
                    with open(html_file_path, "r", encoding="ISO-8859-1") as file:
                        soup = BeautifulSoup(file, "html.parser")
                except Exception as e:
                    logging.error(f"Erreur lors de la lecture du fichier {html_file_path}: {e}")
                    continue
            except Exception as e:
                logging.error(f"Erreur inattendue lors de la lecture du fichier {html_file_path}: {e}")
                continue

            tournament_name = soup.title.string.replace("Standings: ", "").replace(" | Limitless", "").strip()

            tournament_script = soup.find("script", string=lambda text: text and "tournamentId" in text)
            tournament_id = None
            if tournament_script:
                for line in tournament_script.string.split(';'):
                    if "tournamentId" in line:
                        tournament_id = line.split('=')[1].strip().replace("'", "").replace(";", "").split(',')[0]

            players_tournaments_data = []
            for row in soup.select("div.standings table tr"):
                if row.get("data-name"):
                    try:
                        name = row["data-name"]
                        placing = int(row.get("data-placing", 0))
                        if placing != 0:
                            tds = row.find_all("td")
                            if len(tds) >= 5:
                                points_text = tds[3].text.strip()
                                record_text = tds[4].text.strip()

                                if not points_text:
                                    continue

                                points = int(points_text)
                                victories, losses, draws = map(int, record_text.split(" - "))

                                winrate = victories / (victories + losses + draws) if (victories + losses + draws) != 0 else 1

                                players_tournaments_data.append({
                                    "tournament_id": tournament_id,
                                    "tournament_name": tournament_name,
                                    "name": name,
                                    "placing": placing,
                                    "points": points,
                                    "victories": victories,
                                    "losses": losses,
                                    "draws": draws,
                                    "winrates": round(winrate, 3)
                                })
                    except ValueError as ve:
                        logging.error(f"Erreur de conversion pour le joueur {row.get('data-name')}: {ve}")
                        continue

            # Ajout direct des decklists depuis le HTML
            players_with_decks = soup.find_all("div", class_="player")

            for player_data in players_tournaments_data:
                player_name = player_data["name"]

                for player_div in players_with_decks:
                    if player_name.lower() in player_div.text.lower():
                        decklist = []
                        for card_div in player_div.select(".decklist .card"):
                            card_name = card_div.get("data-name", "").strip()
                            card_url = card_div.get("data-url", "").strip()
                            try:
                                card_count = int(card_div.get("data-count", 1))
                            except ValueError:
                                card_count = 1

                            if card_url:
                                parts = card_url.split('/')
                                extension = parts[-2] if len(parts) >= 2 else "Unknown"
                                card_number = parts[-1] if len(parts) >= 1 else "Unknown"
                            else:
                                extension = "Unknown"
                                card_number = "Unknown"

                            if f"({extension}-{card_number})" in card_name:
                                decklist.append(f'"{card_name}" x{card_count}')
                            else:
                                decklist.append(f'"{card_name}" ({extension}-{card_number}) x{card_count}')

                        if decklist:
                            player_data["deck"] = ", ".join(decklist)
                        break

            print(f"\nPlayers with Decks for {tournament_name}:")
            for player in players_tournaments_data:
                print(player)

            # Sauvegarde individuelle par joueur
            players_json_folder_path = "C:/Users/matte/OneDrive/Bureau/SAE601_2025/data_collection/tournament_win"
            os.makedirs(players_json_folder_path, exist_ok=True)

            for player_data in players_tournaments_data:
                tournament_id = player_data["tournament_id"]
                player_name = player_data["name"]

                safe_player_name = "".join(c if c.isalnum() else "_" for c in player_name)
                json_file_name = f"{tournament_id}_{safe_player_name}.json"
                json_file_path = os.path.join(players_json_folder_path, json_file_name)

                try:
                    with open(json_file_path, "w", encoding="utf-8") as json_file:
                        json.dump(player_data, json_file, ensure_ascii=False, indent=4)
                except Exception as e:
                    logging.error(f"Erreur lors de l'Ã©criture du fichier JSON {json_file_path}: {e}")

            if players_tournaments_data:
                print(player_data)
